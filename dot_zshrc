# ----------------------------
# Added by Zinit's installer
# ----------------------------
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
zinit light-mode for \
	zdharma-continuum/zinit-annex-as-monitor \
	zdharma-continuum/zinit-annex-bin-gem-node \
	zdharma-continuum/zinit-annex-patch-dl \
	zdharma-continuum/zinit-annex-rust \
	zdharma-continuum/fast-syntax-highlighting \
	zsh-users/zsh-autosuggestions \
	zsh-users/zsh-completions \
	hlissner/zsh-autopair

# ----------------------------
# standard
# ----------------------------
HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=10000

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

setopt auto_cd			# prefixes directory changes with `cd` 
setopt auto_list		# automatically list choices
setopt auto_menu		# show completion menu
setopt auto_param_slash		# if completed param is dir, add slash at end
setopt menu_complete		# don't autoselect first completion entry
setopt extended_history         # record timestamp of command in HISTFILE
setopt hist_expire_dups_first   # delete duplicates first when HISTFILE size exceeds HISTSIZE

# allow zsh to take flight (enable completions)
autoload -Uz compinit
compinit -i

# completions
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # case insensitive tab completion

# ----------------------------
# Zinit plugins
# ----------------------------
# fzf
zi ice from"gh-r" as"program"
zi light junegunn/fzf

# docker 
zi ice from"gh-r" as"program" mv"docker* -> docker-compose"
zi load docker/compose

# mcfly
zinit ice lucid wait"0a" from"gh-r" as"program" atload'eval "$(mcfly init zsh)"'
zinit light cantino/mcfly
export MCFLY_FUZZY=2 # Allow fuzzy matching 
export MCFLY_KEY_SCHEME=vim # Change Mcfly keymap to vim
export MCFLY_RESULTS=50

# terminal with vim keybindings
# we use zsh-vi-mode instead of OMZP::vi-mode because the '^R' keybindings 
# overlaps with mcfly and breaks one or the other.
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode
ZVM_VI_INSERT_ESCAPE_BINDKEY=jk

# starship
zinit ice as"command" from"gh-r" \
	atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
        atpull"%atclone" src"init.zsh"
zinit light starship/starship

# zoxide
zinit ice lucid wait"0a" from="gh-r" as="program" atload'eval "$(zoxide init zsh)"'
zinit light ajeetdsouza/zoxide

# exa
zinit ice as"program" from"gh-r" mv"exa* -> exa"
zinit light ogham/exa

# bat
zinit ice as"program" from"gh-r" mv"bat* -> bat" pick"bat/bat"
zinit light sharkdp/bat

# fd
zinit ice as"program" from"gh-r" mv"fd* -> fd" pick"fd/fd"
zinit light sharkdp/fd

# ripgrep
zinit ice as"program" from"gh-r" mv"ripgrep* -> rg" pick"rg/rg"
zinit light BurntSushi/ripgrep

# ----------------------------
# functions
# ----------------------------
function kp() {
	port_to_kill="$@"
	echo $port_to_kill
	kill -9 $(lsof -ti:"$port_to_kill")
	port_to_kill="" 
}

function mkd() {
	mkdir "$@" && z "$@"
}

function git_current_branch() {
	echo $(git rev-parse --abbrev-ref HEAD 2>/dev/null)
}

function git_set_default_branch() {
	git remote set-head origin -a
}

function git_default_branch() {
	echo $(git rev-parse --abbrev-ref origin/HEAD | cut -c8-)
}

function grename() {
	# try to rename branch locally
	if [[ -z "$1" && -z "$2" ]]; then
		echo "Usage: $0 old_branch new_branch"
		return 1
	elif [[ -z "$2" ]]; then
		echo "Renaming $(git_current_branch) to $1"
		git branch -m "$(git_current_branch)" "$1"
	else 
		echo "Renaming $1 to $2"
		git branch -m "$1" "$2"
	fi

	# rename branch in origin remote
	if git push origin :"$1"; then
		git push --set-upstream origin "$2"
	fi
}

function gdnolock() {
	git diff "$@" ":(exclude)package-lock.json" ":(exclude)pnpm-lock.yaml" ":(exclude)*.lock"
}

function gddnolock() {
	git diff "$(git_default_branch)" "$@" ":(exclude)package-lock.json" ":(exclude)pnpm-lock.yaml" ":(exclude)*.lock"
}

# ----------------------------
# aliases
# ----------------------------
alias c=clear
alias e="${EDITOR} ." # [E]dit

# chezmoi
alias ch="chezmoi"
alias che="chezmoi edit"
alias cha="chezmoi apply -v"
alias chd="chezmoi diff -v"
alias chu="chezmoi update -v"
alias chc="chezmoi cd"

alias chez="che ~/.zshrc" # [CH]ezmoi [E]dit [Z]shrc
alias chen="che ~/.config/nvim" # [CH]ezmoi [E]dit [N]vim

# docker
alias dsa='docker stop "$(docker ps -aq)"' # [D]ocker [S]top [A]ll
alias dra='docker rm "$(docker ps -aq)"' # [D]ocker [R]emove [A]ll

# git
alias gm="git merge"
alias gss="git status --short"
alias gaa="git add --all"
alias gcam="git commit -a -m"
alias gbD="git branch -D"
alias gsd='"$(git_set_default_branch)"'

alias gc!="git commit -v --ammend"
alias gco="git checkout"
alias gcb="git checkout -b"
alias gci='git checkout "$(git branch -a | fzf | xargs)"'
alias gcd='git checkout "$(git_default_branch)"'

alias gd="git diff"
alias gdd='gd "$(git_default_branch)"' # [G]it [D]iff [D]efault
alias gdds='gd "$(git_default_branch)" --stat' # [G]it [D]iff [D]efault [S]tats
alias gdi='gd "$(git branch -a | fzf | xargs)"' # [G]it [D]iff [I]nteractive

alias gl="git pull"
alias gp="git push"
alias gpsup='git push -u origin "$(git_current_branch)"'
alias glg='git log'
alias glgg="git log --graph --decorate --all"
alias grbi="git rebase -i --autosquash"
alias grbc="git rebase --continue"
alias gafr="gaa && git commit --fixup HEAD && grbi HEAD~2" # [G]it [A]dd all [F]ixup [R]ebase
alias grh="git reset --hard"
alias gsta="git stash push"
alias gstc="git stash clear"
alias gstaa="git stash apply"
alias gf='git fetch --all'
alias gmtl='git mergetool --no-prompt --tool=nvimdiff2'

# ls
alias ls='exa'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'

# tmux 
alias ta='tmux attach -t' # [T]mux [A]ttach
alias tns='tmux new -s' # [T]mux [N]ew [S]ession

# ----------------------------
# configs for native deps
# ----------------------------
# openssl
BREW_PATH="opt/homebrew/opt"
export PATH="/$BREW_PATH/cyrus-sasl@2.1.27/sbin:$PATH"
export PATH="/$BREW_PATH/openssl@1.1/bin:$PATH"
export LDFLAGS="-L/$BREW_PATH/openssl@1.1/lib/ -L/$BREW_PATH/cyrus-sasl/lib"
export CPPFLAGS="-I/$BREW_PATH/openssl@1.1/include -I/$BREW_PATH/cyrus-sasl/include"
export PKG_CONFIG_PATH="/$BREW_PATH/cyrus-sasl/lib/pkgconfig"

# nvm 
export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# pnpm
export PNPM_HOME="/$HOME/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# rust
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.cargo/env:$PATH"

# ruby
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
eval "$(rbenv init -)"

# java
export ANDROID_HOME=$HOME/Library/Android/sdk
export ANDROID_SDK=$ANDROID_HOME
export ANDROID_NDK_HOME="/opt/homebrew/share/android-ndk"
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export PATH="/opt/homebrew/opt/cyrus-sasl/sbin:$PATH"

# lua
export PATH=$PATH:$HOME/.config/lsp/lua-language-server/bin

# gpg key tool
export GPG_TTY=$(tty)

# support for Google Cloud SDK
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi
