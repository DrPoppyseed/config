# zmodload zsh/zprof
# ----------------------------
# Added by Zinit's installer
# ----------------------------
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
  print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
  command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
  command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
    print -P "%F{33} %F{34}Installation successful.%f%b" || \
    print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# ----------------------------
# standard
# ----------------------------
HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=1000
export SHELL_SESSIONS_DISABLE=1
setopt SHARE_HISTORY

setopt auto_cd # prefixes directory changes with `cd` 
setopt auto_list # automatically list choices
setopt auto_menu # show completion menu
setopt auto_param_slash	# if completed param is dir, add slash at end
setopt menu_complete # don't autoselect first completion entry
setopt extended_history # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE

# allow zsh to take flight (enable completions)
autoload -Uz compinit
compinit -i

# completions
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # case insensitive tab completion

# ----------------------------
# Zinit plugins
# ----------------------------
# evalcache
zinit ice lucid wait"0a"
zinit load mroth/evalcache

# Load a few important annexes, without Turbo
zinit wait lucid blockf light-mode for \
  @'zsh-users/zsh-autosuggestions' \
  @'zsh-users/zsh-completions' \
  @'zdharma-continuum/fast-syntax-highlighting' \
  @'hlissner/zsh-autopair'

# mcfly
zinit ice lucid wait"0a" from"gh-r" as"program" atload'_evalcache mcfly init zsh'
zinit light cantino/mcfly
export MCFLY_FUZZY=2 # Allow fuzzy matching 
export MCFLY_KEY_SCHEME=vim # Change Mcfly keymap to vim
export MCFLY_RESULTS=50
export MCFLY_DISABLE_MENU=TRUE

# terminal with vim keybindings
# we use zsh-vi-mode instead of OMZP::vi-mode because the '^R' keybindings 
# overlaps with mcfly and breaks one or the other.
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode
ZVM_VI_INSERT_ESCAPE_BINDKEY=jk

# starship
zinit ice lucid wait as"command" from"gh-r" \
  atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
  atpull"%atclone" src"init.zsh"
zinit light starship/starship

# zoxide
zinit ice lucid wait"0a" from="gh-r" as="program" atload'_evalcache zoxide init zsh'
zinit light ajeetdsouza/zoxide

# ----------------------------
# functions and aliases
# ----------------------------
if [[ -r ~/.aliasrc ]]; then
	. ~/.aliasrc
fi

# ----------------------------
# speed hacks
# ----------------------------
# automatically compiles zshrc for faster startup time
# https://zenn.dev/fuzmare/articles/zsh-source-zcompile-all
function source {
  ensure_zcompiled $1
  builtin source $1
}
function ensure_zcompiled {
  local compiled="$1.zwc"
  if [[ ! -r "$compiled" || "$1" -nt "$compiled" ]]; then
    echo "Compiling $1"
    zcompile $1
  fi
}
ensure_zcompiled ~/.zshrc

# ----------------------------
# configs for native deps
# ----------------------------
# openssl
BREW_PATH="opt/homebrew/opt"
export PATH="/$BREW_PATH/cyrus-sasl@2.1.27/sbin:$PATH"
export PATH="/$BREW_PATH/openssl@1.1/bin:$PATH"
export LDFLAGS="-L/$BREW_PATH/openssl@1.1/lib/ -L/$BREW_PATH/cyrus-sasl/lib"
export CPPFLAGS="-I/$BREW_PATH/openssl@1.1/include -I/$BREW_PATH/cyrus-sasl/include"
export PKG_CONFIG_PATH="/$BREW_PATH/cyrus-sasl/lib/pkgconfig"

# nvm 
# https://gist.github.com/grrowl/cec975ecfe690d13918f40ff5827fecb
function lazy_nvm {
  unset -f nvm
  unset -f npm
  unset -f node
  unset -f npx

  if [ -d "${HOME}/.nvm" ]; then
    export NVM_DIR="$HOME/.nvm"
    [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
    [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
  fi
}
function nvm { lazy_nvm; nvm "$@"; }
function npm { lazy_nvm; npm "$@"; }
function node { lazy_nvm; node "$@"; }
function npx { lazy_nvm; npx "$@"; }

# pnpm
export PNPM_HOME="/$HOME/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# rust
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.cargo/env:$PATH"

# java
export ANDROID_HOME=$HOME/Library/Android/sdk
export ANDROID_SDK=$ANDROID_HOME
export ANDROID_NDK_HOME="/opt/homebrew/share/android-ndk"
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export PATH="/opt/homebrew/opt/cyrus-sasl/sbin:$PATH"

# lua
export PATH=$PATH:$HOME/.config/lsp/lua-language-server/bin

# gpg key tool
export GPG_TTY=$(tty)

# lazy Google Cloud SDK
function lazy_gcloud {
  unset -f gcloud

  if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then 
    . "$HOME/google-cloud-sdk/path.zsh.inc"; 
  fi
  if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then 
    . "$HOME/google-cloud-sdk/completion.zsh.inc"; 
  fi
}
function gcloud { lazy_gcloud; gcloud "$@"; }

# try to source nix 
# if [ -f "/nix/var/nix/profiles/default/etc/profile.d/nix.sh" ]; then 
#     source "/nix/var/nix/profiles/default/etc/profile.d/nix.sh"
# fi
# if [ -f "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh" ]; then 
#     source "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
# fi
# zprof
